diff --git a/node_modules/cubing/dist/esm/bluetooth/index.js b/node_modules/cubing/dist/esm/bluetooth/index.js
index 48942ea..d8748fc 100644
--- a/node_modules/cubing/dist/esm/bluetooth/index.js
+++ b/node_modules/cubing/dist/esm/bluetooth/index.js
@@ -343,7 +343,8 @@ async function decryptState(data, aesKey) {
   if (probablyDecodedCorrectly(copy)) {
     return copy;
   }
-  throw new Error("Invalid Gan cube state");
+  // throw new Error("Invalid Gan cube state");
+  return copy;
 }
 var PhysicalState = class {
   constructor(dataView, timeStamp) {
@@ -372,7 +373,7 @@ var PhysicalState = class {
     const w = wSquared > 0 ? Math.sqrt(wSquared) : 0;
     const quat = new Quaternion2(x, y, z, w);
     if (!homeQuatInverse) {
-      homeQuatInverse = quat.clone().inverse();
+      homeQuatInverse = quat.clone().invert();
     }
     return quat.clone().multiply(homeQuatInverse.clone());
   }
@@ -963,7 +964,7 @@ var GoCube = class extends BluetoothPuzzle {
     this.alg = alg || new Alg();
   }
   resetOrientation() {
-    this.homeQuatInverse = this.lastRawQuat.clone().inverse();
+    this.homeQuatInverse = this.lastRawQuat.clone().invert();
     this.currentQuat = new Quaternion3(0, 0, 0, 1);
     this.lastTarget = new Quaternion3(0, 0, 0, 1);
   }
@@ -992,7 +993,7 @@ var GoCube = class extends BluetoothPuzzle {
       const quat = new Quaternion3(coords[0], coords[1], coords[2], coords[3]);
       this.lastRawQuat = quat.clone();
       if (!this.homeQuatInverse) {
-        this.homeQuatInverse = quat.clone().inverse();
+        this.homeQuatInverse = quat.clone().invert();
       }
       const targetQuat = quat.clone().multiply(this.homeQuatInverse.clone());
       targetQuat.y = -targetQuat.y;
