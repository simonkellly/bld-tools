import{k as h}from"./index.c13cb735.js";function D(f,d){const a=[],r=[];for(const t of d.split(`
`)){const s=t.split(" ");if(!t.startsWith("SetOrder ")){if(t.startsWith("Alg ")){const e=h.fromString(t.substring(4));r.push({alg:e,transformation:f.algToTransformation(e)})}else if(t.startsWith("SubgroupSizes "))for(let e=1;e<s.length;e++)a.push(parseInt(s[e]))}}const u={ordering:new Array(a.length)},l=[];let g=0;l.push(0);const b=h.fromString(""),S=f.identityTransformation();for(let t=0;t<a.length;t++)g+=a[t],l.push(g),r.splice(g-1,0,{alg:b,transformation:S});if(r.length!==g)throw Error(`Bad sgs; expected ${g-a.length} algs but saw ${r.length-a.length}`);const p={};for(const t in f.definition.orbits){const s=f.definition.orbits[t];p[t]=new Array(s.numPieces).fill(!1)}for(let t=a.length-1;t>=0;t--){const s=[];for(let o=l[t];o<l[t+1];o++){const m=r[o].transformation;for(const i in f.definition.orbits){const c=f.definition.orbits[i];for(let n=0;n<c.numPieces;n++)(m.transformationData[i].permutation[n]!==n||m.transformationData[i].orientation[n]!==0)&&(p[i][n]||(s.push({orbitName:i,permutationIdx:n}),p[i][n]=!0))}}const e={};for(let o=l[t];o<l[t+1];o++){const m=r[o].transformation.invert();let i="";for(let c=0;c<s.length;c++){const n=s[c];i=`${i} ${m.transformationData[n.orbitName].permutation[n.permutationIdx]} ${m.transformationData[n.orbitName].orientation[n.permutationIdx]}`}e[i]=r[o],r[o].alg=r[o].alg.invert(),r[o].transformation=r[o].transformation.invert()}u.ordering[t]={pieceOrdering:s,lookup:e}}return u}export{D as p};
